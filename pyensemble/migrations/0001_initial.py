# Generated by Django 3.1.14 on 2023-01-23 22:17

import datetime
from django.db import migrations, models
import django.db.models.deletion
import encrypted_model_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('attribute_class', models.CharField(db_column='class', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='DataFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('df_type', models.CharField(default='enum', max_length=15)),
                ('enum_values', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'unique_together': {('df_type', 'enum_values')},
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('irb_id', models.CharField(blank=True, max_length=30)),
                ('sona_url', models.CharField(blank=True, max_length=200)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('language', models.CharField(default='en', max_length=30)),
                ('play_question_audio', models.BooleanField(default=False)),
                ('params', models.TextField(blank=True)),
                ('locked', models.BooleanField(default=False)),
                ('is_group', models.BooleanField(default=False, help_text='Subjects participate in groups')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentXForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_order', models.IntegerField()),
                ('form_handler', models.CharField(blank=True, choices=[('form_generic', 'form_generic'), ('form_stimulus_s', 'form_stimulus_s'), ('form_generic_s', 'form_generic_s'), ('form_image_s', 'form_image_s'), ('form_feedback', 'form_feedback'), ('form_end_session', 'form_end_session'), ('form_consent', 'form_consent'), ('form_subject_register', 'form_subject_register'), ('form_subject_email', 'form_subject_email'), ('group_trial', 'group_trial')], default='form_generic', max_length=50)),
                ('goto', models.IntegerField(blank=True, null=True)),
                ('repeat', models.IntegerField(blank=True, null=True)),
                ('condition', models.TextField(blank=True)),
                ('condition_script', models.CharField(blank=True, max_length=100)),
                ('stimulus_script', models.CharField(blank=True, max_length=100)),
                ('break_loop_button', models.BooleanField(default=False)),
                ('break_loop_button_text', models.CharField(blank=True, max_length=50)),
                ('continue_button_text', models.CharField(blank=True, default='Next', max_length=50)),
                ('use_clientside_validation', models.BooleanField(default=False)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('category', models.CharField(blank=True, max_length=19)),
                ('header', models.TextField(blank=True)),
                ('footer', models.TextField(blank=True)),
                ('header_audio_path', models.CharField(blank=True, max_length=50)),
                ('footer_audio_path', models.CharField(blank=True, max_length=50)),
                ('version', models.FloatField(blank=True, null=True)),
                ('locked', models.BooleanField(default=False)),
                ('visit_once', models.BooleanField(default=False)),
                ('experiments', models.ManyToManyField(through='pyensemble.ExperimentXForm', to='pyensemble.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='FormXQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_iteration', models.IntegerField(default=1)),
                ('form_question_num', models.IntegerField()),
                ('required', models.BooleanField(default=True)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.form')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_unique_hash', models.CharField(db_column='unique_hash', max_length=128, unique=True)),
                ('text', models.TextField()),
                ('category', models.CharField(blank=True, max_length=64)),
                ('value_range', models.CharField(blank=True, max_length=30)),
                ('value_default', models.CharField(blank=True, max_length=30)),
                ('html_field_type', models.CharField(choices=[('radiogroup', 'radiogroup'), ('checkbox', 'checkbox'), ('textarea', 'textarea'), ('text', 'text'), ('menu', 'menu'), ('numeric', 'numeric')], default='radiogroup', max_length=10)),
                ('audio_path', models.CharField(blank=True, max_length=50)),
                ('locked', models.BooleanField(default=False)),
                ('data_format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.dataformat')),
                ('forms', models.ManyToManyField(through='pyensemble.FormXQuestion', to='pyensemble.Form')),
            ],
        ),
        migrations.CreateModel(
            name='Stimulus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=30)),
                ('playlist', models.CharField(blank=True, max_length=50)),
                ('artist', models.CharField(blank=True, max_length=200)),
                ('album', models.TextField(blank=True)),
                ('genre', models.TextField(blank=True)),
                ('file_format', models.CharField(blank=True, max_length=6)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('duration', models.TimeField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('compression_bit_rate', models.IntegerField(blank=True, null=True)),
                ('sample_rate', models.IntegerField(blank=True, null=True)),
                ('sample_size', models.IntegerField(blank=True, null=True)),
                ('channels', models.IntegerField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('location', models.FileField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('id_origin', models.CharField(choices=[('PYENS', 'PyEnsemble'), ('PRLFC', 'Prolific')], default='PYENS', max_length=12)),
                ('date_entered', models.DateField(auto_now_add=True)),
                ('name_last', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_first', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_middle', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_suffix', encrypted_model_fields.fields.EncryptedCharField()),
                ('passphrase', encrypted_model_fields.fields.EncryptedCharField()),
                ('security_questions', models.TextField()),
                ('security_responses', encrypted_model_fields.fields.EncryptedTextField()),
                ('email', encrypted_model_fields.fields.EncryptedEmailField()),
                ('phone1', encrypted_model_fields.fields.EncryptedCharField()),
                ('phone2', encrypted_model_fields.fields.EncryptedCharField()),
                ('address1', encrypted_model_fields.fields.EncryptedCharField()),
                ('address2', encrypted_model_fields.fields.EncryptedCharField()),
                ('address3', encrypted_model_fields.fields.EncryptedCharField()),
                ('city', encrypted_model_fields.fields.EncryptedCharField()),
                ('county', encrypted_model_fields.fields.EncryptedCharField()),
                ('state', encrypted_model_fields.fields.EncryptedCharField()),
                ('postal_code', encrypted_model_fields.fields.EncryptedCharField()),
                ('sex', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('UN', 'Undeclared')], default='UN', max_length=2)),
                ('ethnicity', models.CharField(choices=[('HL', 'Hispanic or Latino'), ('NHL', 'Not Hispanic or Latino'), ('UN', 'Undeclared')], default='UN', max_length=4)),
                ('race', models.CharField(choices=[('AIAN', 'American Indian or Alaska Native'), ('A', 'Asian'), ('B', 'Black or African American'), ('NHPI', 'Native Hawaiian or Other Pacific Islander'), ('W', 'White'), ('UN', 'Undeclared')], default='UN', max_length=4)),
                ('dob', encrypted_model_fields.fields.EncryptedDateField(default=datetime.datetime(1900, 1, 1, 0, 0))),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_code', models.CharField(max_length=32)),
                ('participant_code', models.CharField(blank=True, default='', max_length=4)),
                ('experimenter_code', models.CharField(blank=True, default='', max_length=4)),
                ('type', models.CharField(choices=[('master', 'Master'), ('user', 'User'), ('group', 'Group')], default='master', max_length=6)),
                ('used', models.BooleanField(default=False)),
                ('expiration_datetime', models.DateTimeField(blank=True, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
                ('subject', models.ForeignKey(db_column='subject_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='pyensemble.subject')),
            ],
        ),
        migrations.CreateModel(
            name='StimulusXAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_hash', models.CharField(max_length=32, unique=True)),
                ('attribute_value_double', models.FloatField(blank=True, null=True)),
                ('attribute_value_text', models.TextField(blank=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.attribute')),
                ('stimulus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.stimulus')),
            ],
        ),
        migrations.AddField(
            model_name='stimulus',
            name='attributes',
            field=models.ManyToManyField(through='pyensemble.StimulusXAttribute', to='pyensemble.Attribute'),
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('age', models.PositiveSmallIntegerField(null=True)),
                ('expired', models.BooleanField(blank=True, default=False)),
                ('origin_sessid', models.CharField(blank=True, max_length=64, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
                ('subject', models.ForeignKey(db_column='subject_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='pyensemble.subject')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pyensemble.ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('form_order', models.PositiveSmallIntegerField(default=None)),
                ('form_question_num', models.PositiveSmallIntegerField(default=None)),
                ('question_iteration', models.PositiveSmallIntegerField(default=1)),
                ('response_order', models.PositiveSmallIntegerField(default=None)),
                ('response_text', models.TextField(blank=True)),
                ('response_enum', models.IntegerField(blank=True, null=True)),
                ('jspsych_data', models.TextField(blank=True)),
                ('decline', models.BooleanField(default=False)),
                ('misc_info', models.TextField(blank=True)),
                ('trial_info', models.JSONField(null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.form')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.question')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.session')),
                ('stimulus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pyensemble.stimulus')),
                ('subject', models.ForeignKey(db_column='subject_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.subject')),
            ],
        ),
        migrations.AddField(
            model_name='formxquestion',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.question'),
        ),
        migrations.AddField(
            model_name='form',
            name='questions',
            field=models.ManyToManyField(through='pyensemble.FormXQuestion', to='pyensemble.Question'),
        ),
        migrations.AddField(
            model_name='experimentxform',
            name='form',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.form'),
        ),
        migrations.CreateModel(
            name='ExperimentXAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.attribute')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='forms',
            field=models.ManyToManyField(through='pyensemble.ExperimentXForm', to='pyensemble.Form'),
        ),
        migrations.CreateModel(
            name='AttributeXAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_hash', models.CharField(max_length=32, unique=True)),
                ('mapping_name', models.CharField(max_length=256)),
                ('mapping_value_double', models.FloatField(blank=True, null=True)),
                ('mapping_value_text', models.CharField(blank=True, max_length=256)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pyensemble.attribute')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='pyensemble.attribute')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='stimulus',
            unique_together={('name', 'location')},
        ),
        migrations.AlterUniqueTogether(
            name='formxquestion',
            unique_together={('form', 'question', 'form_question_num', 'question_iteration')},
        ),
        migrations.CreateModel(
            name='ExperimentXStimulus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.experiment')),
                ('stimulus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyensemble.stimulus')),
            ],
            options={
                'unique_together': {('experiment', 'stimulus')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='experimentxform',
            unique_together={('experiment', 'form', 'form_order')},
        ),
    ]

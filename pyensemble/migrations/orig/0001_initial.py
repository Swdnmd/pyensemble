# Generated by Django 2.2.7 on 2020-01-05 23:05

from django.db import migrations, models
import django.db.models.deletion
import encrypted_model_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('attribute_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('class_field', models.CharField(db_column='class', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='DataFormat',
            fields=[
                ('data_format_id', models.IntegerField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=15)),
                ('enum_values', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('experiment_id', models.IntegerField(primary_key=True, serialize=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('experiment_title', models.CharField(max_length=50, unique=True)),
                ('experiment_description', models.TextField(blank=True)),
                ('response_table', models.CharField(max_length=50)),
                ('irb_id', models.CharField(blank=True, max_length=30)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('language', models.CharField(max_length=30)),
                ('play_question_audio', models.CharField(max_length=1)),
                ('encrypted_response_table', models.CharField(max_length=1)),
                ('params', models.TextField()),
                ('locked', models.CharField(max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentXForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_order', models.IntegerField()),
                ('form_handler', models.CharField(blank=True, max_length=50)),
                ('goto', models.IntegerField(blank=True, null=True)),
                ('repeat', models.IntegerField(blank=True, null=True)),
                ('condition', models.TextField(blank=True)),
                ('condition_matlab', models.TextField(blank=True)),
                ('stimulus_matlab', models.TextField(blank=True)),
                ('break_loop_button', models.CharField(max_length=1)),
                ('break_loop_button_text', models.CharField(blank=True, max_length=50)),
                ('experiment', models.ForeignKey(db_column='experiment_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Form',
            fields=[
                ('form_id', models.IntegerField(primary_key=True, serialize=False)),
                ('form_name', models.CharField(max_length=50, unique=True)),
                ('form_category', models.CharField(blank=True, max_length=19)),
                ('header', models.TextField(blank=True)),
                ('footer', models.TextField(blank=True)),
                ('header_audio_path', models.CharField(blank=True, max_length=50)),
                ('footer_audio_path', models.CharField(blank=True, max_length=50)),
                ('version', models.FloatField(blank=True, null=True)),
                ('locked', models.CharField(max_length=1)),
                ('condition', models.TextField(blank=True)),
                ('condition_matlab', models.CharField(blank=True, max_length=40)),
                ('visit_once', models.CharField(max_length=1)),
                ('experiments', models.ManyToManyField(through='pyensemble.ExperimentXForm', to='pyensemble.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='FormXQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_iteration', models.IntegerField()),
                ('form_question_num', models.IntegerField()),
                ('form', models.ForeignKey(db_column='form_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Form')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.IntegerField(primary_key=True, serialize=False)),
                ('question_text', models.TextField(blank=True)),
                ('question_category', models.CharField(blank=True, max_length=19)),
                ('heading_format', models.CharField(max_length=14)),
                ('locked', models.CharField(max_length=1)),
                ('forms', models.ManyToManyField(through='pyensemble.FormXQuestion', to='pyensemble.Form')),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('session_id', models.IntegerField(primary_key=True, serialize=False)),
                ('date_time', models.DateTimeField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('php_session_id', models.CharField(blank=True, max_length=70)),
                ('experiment', models.ForeignKey(db_column='experiment_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Stimulus',
            fields=[
                ('stimulus_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=30)),
                ('playlist', models.CharField(blank=True, max_length=50)),
                ('artist', models.CharField(blank=True, max_length=200)),
                ('album', models.TextField(blank=True)),
                ('genre', models.TextField(blank=True)),
                ('file_format', models.CharField(blank=True, max_length=3)),
                ('size', models.IntegerField(blank=True, null=True)),
                ('duration', models.TimeField(blank=True, null=True)),
                ('year', models.TextField(blank=True)),
                ('compression_bit_rate', models.IntegerField(blank=True, null=True)),
                ('sample_rate', models.IntegerField(blank=True, null=True)),
                ('sample_size', models.IntegerField(blank=True, null=True)),
                ('channels', models.IntegerField(blank=True, null=True)),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('location', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('date_entered', models.DateField(auto_now_add=True)),
                ('name_last', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_first', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_middle', encrypted_model_fields.fields.EncryptedCharField()),
                ('name_suffix', encrypted_model_fields.fields.EncryptedCharField()),
                ('passphrase', encrypted_model_fields.fields.EncryptedCharField()),
                ('security_questions', models.TextField()),
                ('security_responses', encrypted_model_fields.fields.EncryptedTextField()),
                ('email', encrypted_model_fields.fields.EncryptedEmailField()),
                ('phone1', encrypted_model_fields.fields.EncryptedCharField()),
                ('phone2', encrypted_model_fields.fields.EncryptedCharField()),
                ('address1', encrypted_model_fields.fields.EncryptedCharField()),
                ('address2', encrypted_model_fields.fields.EncryptedCharField()),
                ('address3', encrypted_model_fields.fields.EncryptedCharField()),
                ('city', encrypted_model_fields.fields.EncryptedCharField()),
                ('county', encrypted_model_fields.fields.EncryptedCharField()),
                ('state', encrypted_model_fields.fields.EncryptedCharField()),
                ('postal_code', encrypted_model_fields.fields.EncryptedCharField()),
                ('sex', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('NR', 'No Response')], default='NR', max_length=2)),
                ('ethnicity', models.CharField(choices=[('HL', 'Hispanic or Latino'), ('NHL', 'Not Hispanic or Latino')], default='UN', max_length=4)),
                ('race', models.CharField(choices=[('AIAN', 'American Indian or Alaska Native'), ('A', 'Asian'), ('B', 'Black or African American'), ('NHPI', 'Native Hawaiian or Other Pacific Islander'), ('W', 'White')], default='UN', max_length=2)),
                ('dob', encrypted_model_fields.fields.EncryptedDateField()),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('ticket_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ticket_code', models.CharField(max_length=32)),
                ('type', models.CharField(choices=[('master', 'Master'), ('user', 'User')], default='master', max_length=6)),
                ('used', models.BooleanField(default=False)),
                ('expiration_datetime', models.DateTimeField(blank=True, null=True)),
                ('assigned', models.BooleanField(default=False)),
                ('experiment', models.ForeignKey(db_column='experiment_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Experiment')),
                ('session', models.ForeignKey(db_column='session_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pyensemble.Session')),
            ],
        ),
        migrations.AddField(
            model_name='session',
            name='subject',
            field=models.ForeignKey(db_column='subject_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Subject'),
        ),
        migrations.AddField(
            model_name='session',
            name='ticket',
            field=models.ForeignKey(db_column='ticket_id', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pyensemble.Ticket'),
        ),
        migrations.CreateModel(
            name='QuestionXDataFormat',
            fields=[
                ('qdf_id', models.IntegerField(primary_key=True, serialize=False)),
                ('subquestion', models.IntegerField()),
                ('heading', models.TextField(blank=True)),
                ('range', models.CharField(blank=True, max_length=30)),
                ('default', models.CharField(blank=True, max_length=30)),
                ('html_field_type', models.CharField(blank=True, max_length=10)),
                ('audio_path', models.CharField(blank=True, max_length=50)),
                ('required', models.BooleanField(default=True)),
                ('answer_format', models.ForeignKey(db_column='answer_format_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.DataFormat')),
                ('question', models.ForeignKey(db_column='question_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Question')),
            ],
            options={
                'unique_together': {('question', 'subquestion', 'answer_format')},
            },
        ),
        migrations.AddField(
            model_name='question',
            name='values',
            field=models.ManyToManyField(through='pyensemble.QuestionXDataFormat', to='pyensemble.DataFormat'),
        ),
        migrations.AddField(
            model_name='formxquestion',
            name='question',
            field=models.ForeignKey(db_column='question_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Question'),
        ),
        migrations.AddField(
            model_name='form',
            name='questions',
            field=models.ManyToManyField(through='pyensemble.FormXQuestion', to='pyensemble.Question'),
        ),
        migrations.AddField(
            model_name='experimentxform',
            name='form',
            field=models.ForeignKey(db_column='form_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Form'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='forms',
            field=models.ManyToManyField(through='pyensemble.ExperimentXForm', to='pyensemble.Form'),
        ),
        migrations.CreateModel(
            name='AttributeXAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_id_child', models.IntegerField()),
                ('attribute_id_parent', models.IntegerField()),
                ('mapping_name', models.CharField(max_length=128)),
                ('mapping_value_double', models.FloatField(blank=True, null=True)),
            ],
            options={
                'unique_together': {('attribute_id_child', 'attribute_id_parent', 'mapping_name', 'mapping_value_double')},
            },
        ),
        migrations.CreateModel(
            name='StimulusXAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_value_double', models.FloatField(blank=True, null=True)),
                ('attribute_value_text', models.TextField(blank=True)),
                ('attribute_id', models.ForeignKey(db_column='attribute_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Attribute')),
                ('stimulus_id', models.ForeignKey(db_column='stimulus_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Stimulus')),
            ],
            options={
                'unique_together': {('stimulus_id', 'attribute_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='formxquestion',
            unique_together={('form', 'question', 'form_question_num', 'question_iteration')},
        ),
        migrations.CreateModel(
            name='ExperimentXStimulus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_id', models.ForeignKey(db_column='experiment_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Experiment')),
                ('stimulus_id', models.ForeignKey(db_column='stimulus_id', on_delete=django.db.models.deletion.CASCADE, to='pyensemble.Stimulus')),
            ],
            options={
                'unique_together': {('experiment_id', 'stimulus_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='experimentxform',
            unique_together={('experiment', 'form', 'form_order')},
        ),
    ]
